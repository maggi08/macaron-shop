Syllabus

### HTML

1. Основы HTML
   - Введение в HTML
   - Структура HTML-документа
2. Основные теги
   - Текстовые теги: `<h1>`, `<p>`, `<span>`, `<strong>`, `<em>`
   - Изображения: `<img>`
   - Атрибуты
3. Списки, Ссылки, Iframe
   - Списки: `<ul>`, `<ol>`, `<li>`
   - Ссылки: `<a>`
   - Iframe: `<iframe>`
4. Создание веб-форм
   - Формы: `<form>`, `<input>`, `<textarea>`, `<button>`
   - Поля ввода: `<input type="text">`, `<input type="password">`, `<input type="email">`
5. Семантическая верстка

### CSS

1. Введение в CSS. Основы
   - Подключение CSS-стилей
   - Синтаксис CSS
2. Знакомство с селекторами и базовыми свойствами стилей
   - Селекторы: классы, идентификаторы, атрибуты
   - Базовые свойства стилей: `margin`, `padding`, `height`, `color`, `background`
3. Оформление текста
   - Стилизация текста: `font-family`, `font-size`, `font-weight`, `line-height`
   - Подключение внешних шрифтов (Google Fonts)
4. Основы позиционирования
   - Позиционирование: `position: relative`, `position: absolute`, `position: fixed`
5. Строчные и блочные элементы
   - Отличия между строчными и блочными элементами: `display: inline`, `display: block`
6. Работа со списками
   - Стилизация списков: `list-style-type`, `list-style-position`
   - Стилизация блочных элементов: `display`, `margin`, `padding`, `border`
7. Основы Flexbox
   - Введение в Flexbox: `display: flex`, `justify-content`, `align-items`
8. Основы Grid
   - Введение в CSS Grid: `display: grid`, `grid-template-columns`, `grid-template-rows`
9. Адаптивная верстка
   - Медиа-запросы: `@media`

### JavaScript

#### Введение

1. Введение в JavaScript
   - История и основные концепции JavaScript
2. Справочники и спецификации
   - MDN Web Docs, ECMAScript
3. Редакторы кода
   - VS Code, Sublime Text, Atom
4. Консоль разработчика
   - Использование консоли в браузере для отладки кода

#### Основы JavaScript

1. Привет, мир!
   - Введение в синтаксис JavaScript, вывод в консоль и на страницу
2. Структура кода
   - Организация кода, строки кода, блоки кода
3. Строгий режим — "use strict"
   - Включение строгого режима, его преимущества и ограничения
4. Переменные
   - Объявление переменных: `var`, `let`, `const`
5. Типы данных
   - Примитивные типы: числа, строки, булевы значения, `null`, `undefined`, символы
   - Объекты: объекты, массивы, функции
6. Взаимодействие
   - Всплывающие окна: `alert`, `prompt`, `confirm`
7. Преобразование типов
   - Явное и неявное преобразование типов
8. Базовые операторы, математика
   - Арифметические, логические и строковые операторы
9. Операторы сравнения
   - Сравнение значений: `==`, `===`, `!=`, `!==`, `<`, `>`, `<=`, `>=`
10. Условное ветвление
    - Условные операторы: `if`, `else`, `else if`, тернарный оператор `?`
11. Логические операторы
    - Логические операции: `&&`, `||`, `!`
12. Операторы нулевого слияния и присваивания
    - Операторы: `??`, `??=`
13. Циклы while и for
    - Основы циклов: `while`, `do...while`, `for`
14. Конструкция "switch"
    - Использование `switch` для выбора между несколькими вариантами

#### Функции

1. Функции
   - Объявление и вызов функций
2. Function Expression
   - Функции как выражения
3. Стрелочные функции, основы
   - Введение в стрелочные функции

#### Особенности JavaScript

1. Качество кода
   - Понятие качества кода и его важность
2. Отладка в браузере
   - Использование инструментов отладки в браузере
3. Советы по стилю кода
   - Рекомендации по написанию чистого и читаемого кода
4. Комментарии
   - Использование комментариев в коде
5. Ниндзя-код
   - Опасности и недостатки "ниндзя-кода"
6. Автоматическое тестирование c использованием фреймворка Mocha
   - Введение в Mocha, написание тестов
7. Полифилы
   - Что такое полифилы, зачем они нужны, примеры использования

#### Объекты: основы

1. Объекты
   - Создание и использование объектов
2. Копирование объектов и ссылки
   - Поверхностное и глубокое копирование объектов
3. Сборка мусора
   - Введение в сборку мусора, механизмы управления памятью
4. Методы объекта, "this"
   - Создание методов в объектах, контекст `this`
5. Конструктор, оператор "new"
   - Создание объектов с помощью конструктора и `new`
6. Опциональная цепочка '?.'
   - Использование опциональной цепочки `?.`
7. Тип данных Symbol
   - Введение в тип данных `Symbol`
8. Преобразование объектов в примитивы
   - Преобразование объектов в примитивные значения

#### Типы данных

1. Методы примитивов
   - Использование методов на примитивных типах данных
2. Числа
   - Работа с числами, математические операции и функции
3. Строки
   - Работа со строками, методы строк
4. Массивы
   - Создание и использование массивов
5. Методы массивов
   - Основные методы массивов: `push`, `pop`, `shift`, `unshift`, `map`, `filter`, `reduce`
6. Перебираемые объекты
   - Итерация по объектам и коллекциям
7. Map и Set
   - Введение в коллекции `Map` и `Set`
8. WeakMap и WeakSet
   - Особенности и использование `WeakMap` и `WeakSet`
9. Object.keys, values, entries
   - Получение ключей, значений и пар ключ-значение объекта
10. Деструктурирующее присваивание
    - Деструктуризация объектов и массивов
11. Дата и время
    - Работа с датой и временем в JavaScript
12. Формат JSON, метод toJSON
    - Форматирование данных в JSON

#### Продвинутая работа с функциями

1. Рекурсия и стек
   - Понятие рекурсии, стек вызовов
2. Остаточные параметры и оператор расширения
   - Использование остаточных параметров и оператора расширения
3. Область видимости переменных, замыкание
   - Понятие области видимости, замыкания
4. Устаревшее ключевое слово "var"
   - Почему не стоит использовать `var`
5. Глобальный объект
   - Работа с глобальным объектом
6. Объект функции, NFE
   - Понятие именованных функциональных выражений
7. Синтаксис "new Function"
   - Создание функций через `new Function`
8. Планирование
   - Таймеры: `setTimeout`, `setInterval`
9. Декораторы и переадресация вызова, call/apply
   - Использование декораторов, методы `call` и `apply`
10. Привязка контекста к функции
    - Привязка контекста с помощью `bind`
11. Повторяем стрелочные функции
    - Особенности и преимущества стрелочных функций

#### Обработка ошибок

1. Обработка ошибок
   - Использование блока `try..catch` для обработки ошибок
2. Пользовательские ошибки, расширение